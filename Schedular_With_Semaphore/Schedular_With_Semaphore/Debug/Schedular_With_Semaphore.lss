
Schedular_With_Semaphore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000bea  00000c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ec  008000a2  008000a2  00000cc0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00001418  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001788  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000764  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000970  00000000  00000000  00003464  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00003dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000787  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000969  00000000  00000000  00004977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000052e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_10>
  2c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b5 05 	call	0xb6a	; 0xb6a <main>
  8a:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_SendTrigger>:
	LCD_SendTrigger();
}

static void LCD_SendTrigger(void)
{
	Dio_WriteChannel(LCD_EN,STD_HIGH);
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e3       	ldi	r24, 0x3F	; 63
  9c:	9f e1       	ldi	r25, 0x1F	; 31
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_SendTrigger+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_SendTrigger+0x12>
  a4:	00 00       	nop
	_delay_ms(2);
	Dio_WriteChannel(LCD_EN,STD_LOW);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
  ae:	8f e3       	ldi	r24, 0x3F	; 63
  b0:	9f e1       	ldi	r25, 0x1F	; 31
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_SendTrigger+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_SendTrigger+0x26>
  b8:	00 00       	nop
	_delay_ms(2);
}
  ba:	08 95       	ret

000000bc <LCD_SendCMD>:
	LCD_SendCMD(ENTRY_MODE);
	_delay_ms(1);
}

void LCD_SendCMD(u8 Command)
{
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
	Dio_WriteChannel(LCD_D4,GET_BIT(Command,4));
  c0:	68 2f       	mov	r22, r24
  c2:	62 95       	swap	r22
  c4:	6f 70       	andi	r22, 0x0F	; 15
  c6:	61 70       	andi	r22, 0x01	; 1
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5,GET_BIT(Command,5));
  ce:	6c 2f       	mov	r22, r28
  d0:	62 95       	swap	r22
  d2:	66 95       	lsr	r22
  d4:	67 70       	andi	r22, 0x07	; 7
  d6:	61 70       	andi	r22, 0x01	; 1
  d8:	89 e0       	ldi	r24, 0x09	; 9
  da:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6,GET_BIT(Command,6));
  de:	6c 2f       	mov	r22, r28
  e0:	62 95       	swap	r22
  e2:	66 95       	lsr	r22
  e4:	66 95       	lsr	r22
  e6:	63 70       	andi	r22, 0x03	; 3
  e8:	61 70       	andi	r22, 0x01	; 1
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7,GET_BIT(Command,7));
  f0:	6c 2f       	mov	r22, r28
  f2:	66 1f       	adc	r22, r22
  f4:	66 27       	eor	r22, r22
  f6:	66 1f       	adc	r22, r22
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RS,STD_LOW);
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	LCD_SendTrigger();
 106:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendTrigger>
	Dio_WriteChannel(LCD_D4,GET_BIT(Command,0));
 10a:	6c 2f       	mov	r22, r28
 10c:	61 70       	andi	r22, 0x01	; 1
 10e:	88 e0       	ldi	r24, 0x08	; 8
 110:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5,GET_BIT(Command,1));
 114:	6c 2f       	mov	r22, r28
 116:	66 95       	lsr	r22
 118:	61 70       	andi	r22, 0x01	; 1
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6,GET_BIT(Command,2));
 120:	6c 2f       	mov	r22, r28
 122:	66 95       	lsr	r22
 124:	66 95       	lsr	r22
 126:	61 70       	andi	r22, 0x01	; 1
 128:	8a e0       	ldi	r24, 0x0A	; 10
 12a:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7,GET_BIT(Command,3));
 12e:	c6 95       	lsr	r28
 130:	c6 95       	lsr	r28
 132:	c6 95       	lsr	r28
 134:	6c 2f       	mov	r22, r28
 136:	61 70       	andi	r22, 0x01	; 1
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RS,STD_LOW);
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	LCD_SendTrigger();
 146:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendTrigger>
}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <LCD_Init>:
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	92 e5       	ldi	r25, 0x52	; 82
 152:	a7 e0       	ldi	r26, 0x07	; 7
 154:	81 50       	subi	r24, 0x01	; 1
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	a0 40       	sbci	r26, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <LCD_Init+0x6>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_Init+0x10>
 15e:	00 00       	nop
#include "LCD_CONFIG.h"

void LCD_Init(void)
{
	_delay_ms(150);
	LCD_SendCMD(RETURN_HOME);
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_SendCMD>
 166:	af e3       	ldi	r26, 0x3F	; 63
 168:	bc e9       	ldi	r27, 0x9C	; 156
 16a:	11 97       	sbiw	r26, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Init+0x1c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Init+0x22>
 170:	00 00       	nop
	_delay_ms(10);
	LCD_SendCMD(FOUR_BIT);
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_SendCMD>
 178:	8f e9       	ldi	r24, 0x9F	; 159
 17a:	9f e0       	ldi	r25, 0x0F	; 15
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_Init+0x2e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_Init+0x34>
 182:	00 00       	nop
	_delay_ms(1);
	LCD_SendCMD(DISPLAY_ON_CURSOR_ON);
 184:	8e e0       	ldi	r24, 0x0E	; 14
 186:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_SendCMD>
 18a:	af e9       	ldi	r26, 0x9F	; 159
 18c:	bf e0       	ldi	r27, 0x0F	; 15
 18e:	11 97       	sbiw	r26, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_Init+0x40>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_Init+0x46>
 194:	00 00       	nop
	_delay_ms(1);
	LCD_SendCMD(CLR_SCREEN);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_SendCMD>
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	9c e9       	ldi	r25, 0x9C	; 156
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Init+0x52>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Init+0x58>
 1a6:	00 00       	nop
	_delay_ms(10);
	LCD_SendCMD(ENTRY_MODE);
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_SendCMD>
 1ae:	af e9       	ldi	r26, 0x9F	; 159
 1b0:	bf e0       	ldi	r27, 0x0F	; 15
 1b2:	11 97       	sbiw	r26, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCD_Init+0x64>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <LCD_Init+0x6a>
 1b8:	00 00       	nop
	_delay_ms(1);
}
 1ba:	08 95       	ret

000001bc <LCD_SendData>:
	LCD_SendTrigger();
}


void LCD_SendData(u8 Data)
{
 1bc:	cf 93       	push	r28
 1be:	c8 2f       	mov	r28, r24
	Dio_WriteChannel(LCD_D4,GET_BIT(Data,4));
 1c0:	68 2f       	mov	r22, r24
 1c2:	62 95       	swap	r22
 1c4:	6f 70       	andi	r22, 0x0F	; 15
 1c6:	61 70       	andi	r22, 0x01	; 1
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5,GET_BIT(Data,5));
 1ce:	6c 2f       	mov	r22, r28
 1d0:	62 95       	swap	r22
 1d2:	66 95       	lsr	r22
 1d4:	67 70       	andi	r22, 0x07	; 7
 1d6:	61 70       	andi	r22, 0x01	; 1
 1d8:	89 e0       	ldi	r24, 0x09	; 9
 1da:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6,GET_BIT(Data,6));
 1de:	6c 2f       	mov	r22, r28
 1e0:	62 95       	swap	r22
 1e2:	66 95       	lsr	r22
 1e4:	66 95       	lsr	r22
 1e6:	63 70       	andi	r22, 0x03	; 3
 1e8:	61 70       	andi	r22, 0x01	; 1
 1ea:	8a e0       	ldi	r24, 0x0A	; 10
 1ec:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7,GET_BIT(Data,7));
 1f0:	6c 2f       	mov	r22, r28
 1f2:	66 1f       	adc	r22, r22
 1f4:	66 27       	eor	r22, r22
 1f6:	66 1f       	adc	r22, r22
 1f8:	8c e0       	ldi	r24, 0x0C	; 12
 1fa:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RS,STD_HIGH);
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	LCD_SendTrigger();
 206:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendTrigger>
	Dio_WriteChannel(LCD_D4,GET_BIT(Data,0));
 20a:	6c 2f       	mov	r22, r28
 20c:	61 70       	andi	r22, 0x01	; 1
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5,GET_BIT(Data,1));
 214:	6c 2f       	mov	r22, r28
 216:	66 95       	lsr	r22
 218:	61 70       	andi	r22, 0x01	; 1
 21a:	89 e0       	ldi	r24, 0x09	; 9
 21c:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6,GET_BIT(Data,2));
 220:	6c 2f       	mov	r22, r28
 222:	66 95       	lsr	r22
 224:	66 95       	lsr	r22
 226:	61 70       	andi	r22, 0x01	; 1
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7,GET_BIT(Data,3));
 22e:	c6 95       	lsr	r28
 230:	c6 95       	lsr	r28
 232:	c6 95       	lsr	r28
 234:	6c 2f       	mov	r22, r28
 236:	61 70       	andi	r22, 0x01	; 1
 238:	8c e0       	ldi	r24, 0x0C	; 12
 23a:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RS,STD_HIGH);
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	LCD_SendTrigger();
 246:	0e 94 49 00 	call	0x92	; 0x92 <LCD_SendTrigger>
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_SendString>:
	Dio_WriteChannel(LCD_EN,STD_LOW);
	_delay_ms(2);
}

void LCD_SendString(char* String)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	while(*String != '\0')
 254:	88 81       	ld	r24, Y
 256:	88 23       	and	r24, r24
 258:	31 f0       	breq	.+12     	; 0x266 <LCD_SendString+0x18>
	_delay_ms(2);
	Dio_WriteChannel(LCD_EN,STD_LOW);
	_delay_ms(2);
}

void LCD_SendString(char* String)
 25a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*String != '\0')
	{
		LCD_SendData(*String);
 25c:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_SendData>
	_delay_ms(2);
}

void LCD_SendString(char* String)
{
	while(*String != '\0')
 260:	89 91       	ld	r24, Y+
 262:	88 23       	and	r24, r24
 264:	d9 f7       	brne	.-10     	; 0x25c <LCD_SendString+0xe>
	{
		LCD_SendData(*String);
		String++;
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <LCD_Send_XY>:

void LCD_Send_XY(u8 X,u8 Y,char* String)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ea 01       	movw	r28, r20
	u8 LOC;
	if(X==1 || X>4)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	11 f0       	breq	.+4      	; 0x27a <LCD_Send_XY+0xe>
 276:	85 30       	cpi	r24, 0x05	; 5
 278:	18 f0       	brcs	.+6      	; 0x280 <LCD_Send_XY+0x14>
	{
		LOC = ROW1_START+Y-1;
 27a:	86 2f       	mov	r24, r22
 27c:	81 58       	subi	r24, 0x81	; 129
 27e:	0c c0       	rjmp	.+24     	; 0x298 <LCD_Send_XY+0x2c>
	}
	else if(X==2)
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	19 f4       	brne	.+6      	; 0x28a <LCD_Send_XY+0x1e>
	{
		LOC = ROW1_START+(0x40)+Y-1;	
 284:	86 2f       	mov	r24, r22
 286:	81 54       	subi	r24, 0x41	; 65
 288:	07 c0       	rjmp	.+14     	; 0x298 <LCD_Send_XY+0x2c>
	}
	else if(X==3)
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	19 f4       	brne	.+6      	; 0x294 <LCD_Send_XY+0x28>
	{
		LOC = ROW1_START+(0x14)+Y-1;
 28e:	86 2f       	mov	r24, r22
 290:	8d 56       	subi	r24, 0x6D	; 109
 292:	02 c0       	rjmp	.+4      	; 0x298 <LCD_Send_XY+0x2c>
	}
	else
	{
		LOC = ROW1_START+(0x54)+Y-1;
 294:	86 2f       	mov	r24, r22
 296:	8d 52       	subi	r24, 0x2D	; 45
	}
	LCD_SendCMD(LOC);
 298:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_SendCMD>
	LCD_SendString(String);
 29c:	ce 01       	movw	r24, r28
 29e:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_SendString>
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <LCD_vSendNumber>:


void LCD_vSendNumber(u16 Copy_u16Number)
{
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	2a 97       	sbiw	r28, 0x0a	; 10
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_Arr[10];
	u8 LOC_i=0;
	if(Copy_u16Number == 0)
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	21 f4       	brne	.+8      	; 0x2ca <LCD_vSendNumber+0x22>
	{
		LCD_SendData('0');
 2c2:	80 e3       	ldi	r24, 0x30	; 48
 2c4:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_SendData>
 2c8:	21 c0       	rjmp	.+66     	; 0x30c <LCD_vSendNumber+0x64>

void LCD_vSendNumber(u16 Copy_u16Number)
{
	u8 LOC_Arr[10];
	u8 LOC_i=0;
	if(Copy_u16Number == 0)
 2ca:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
	{
		while(Copy_u16Number != 0)
		{
			LOC_Arr[LOC_i] = Copy_u16Number%10;
 2cc:	2a e0       	ldi	r18, 0x0A	; 10
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	e1 e0       	ldi	r30, 0x01	; 1
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ec 0f       	add	r30, r28
 2d6:	fd 1f       	adc	r31, r29
 2d8:	e1 0f       	add	r30, r17
 2da:	f1 1d       	adc	r31, r1
 2dc:	b9 01       	movw	r22, r18
 2de:	0e 94 df 05 	call	0xbbe	; 0xbbe <__udivmodhi4>
 2e2:	80 83       	st	Z, r24
			Copy_u16Number /= 10;
 2e4:	86 2f       	mov	r24, r22
 2e6:	97 2f       	mov	r25, r23
			LOC_i++;
 2e8:	1f 5f       	subi	r17, 0xFF	; 255
	{
		LCD_SendData('0');
	}
	else
	{
		while(Copy_u16Number != 0)
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	89 f7       	brne	.-30     	; 0x2d0 <LCD_vSendNumber+0x28>
		{
			LOC_Arr[LOC_i] = Copy_u16Number%10;
			Copy_u16Number /= 10;
			LOC_i++;
		}
		while(LOC_i>0)
 2ee:	11 23       	and	r17, r17
 2f0:	69 f0       	breq	.+26     	; 0x30c <LCD_vSendNumber+0x64>
		{
			LOC_i--;
 2f2:	11 50       	subi	r17, 0x01	; 1
			LCD_SendData(LOC_Arr[LOC_i]+48);
 2f4:	e1 e0       	ldi	r30, 0x01	; 1
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ec 0f       	add	r30, r28
 2fa:	fd 1f       	adc	r31, r29
 2fc:	e1 0f       	add	r30, r17
 2fe:	f1 1d       	adc	r31, r1
 300:	80 81       	ld	r24, Z
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_SendData>
		{
			LOC_Arr[LOC_i] = Copy_u16Number%10;
			Copy_u16Number /= 10;
			LOC_i++;
		}
		while(LOC_i>0)
 308:	11 23       	and	r17, r17
 30a:	99 f7       	brne	.-26     	; 0x2f2 <LCD_vSendNumber+0x4a>
		{
			LOC_i--;
			LCD_SendData(LOC_Arr[LOC_i]+48);
		}
	}
 30c:	2a 96       	adiw	r28, 0x0a	; 10
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	f8 94       	cli
 312:	de bf       	out	0x3e, r29	; 62
 314:	0f be       	out	0x3f, r0	; 63
 316:	cd bf       	out	0x3d, r28	; 61
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	08 95       	ret

00000320 <Dio_WriteChannel>:
 */ 
#include "DIO_INTERFACE.h"
/******************************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level)
{
	switch(ChannelId/8)
 320:	98 2f       	mov	r25, r24
 322:	96 95       	lsr	r25
 324:	96 95       	lsr	r25
 326:	96 95       	lsr	r25
 328:	91 30       	cpi	r25, 0x01	; 1
 32a:	31 f1       	breq	.+76     	; 0x378 <Dio_WriteChannel+0x58>
 32c:	91 30       	cpi	r25, 0x01	; 1
 32e:	38 f0       	brcs	.+14     	; 0x33e <Dio_WriteChannel+0x1e>
 330:	92 30       	cpi	r25, 0x02	; 2
 332:	09 f4       	brne	.+2      	; 0x336 <Dio_WriteChannel+0x16>
 334:	40 c0       	rjmp	.+128    	; 0x3b6 <Dio_WriteChannel+0x96>
 336:	93 30       	cpi	r25, 0x03	; 3
 338:	09 f0       	breq	.+2      	; 0x33c <Dio_WriteChannel+0x1c>
 33a:	7a c0       	rjmp	.+244    	; 0x430 <Dio_WriteChannel+0x110>
 33c:	5b c0       	rjmp	.+182    	; 0x3f4 <Dio_WriteChannel+0xd4>
	{
		/* PortA */
		case 0:
		if(Level == 1){
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	69 f4       	brne	.+26     	; 0x35c <Dio_WriteChannel+0x3c>
			SET_BIT(PORTA,ChannelId);
 342:	4b b3       	in	r20, 0x1b	; 27
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	b9 01       	movw	r22, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <Dio_WriteChannel+0x30>
 34c:	66 0f       	add	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	8a 95       	dec	r24
 352:	e2 f7       	brpl	.-8      	; 0x34c <Dio_WriteChannel+0x2c>
 354:	cb 01       	movw	r24, r22
 356:	84 2b       	or	r24, r20
 358:	8b bb       	out	0x1b, r24	; 27
 35a:	08 95       	ret
		}else {
			CLR_BIT(PORTA,ChannelId);
 35c:	4b b3       	in	r20, 0x1b	; 27
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	b9 01       	movw	r22, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <Dio_WriteChannel+0x4a>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	8a 95       	dec	r24
 36c:	e2 f7       	brpl	.-8      	; 0x366 <Dio_WriteChannel+0x46>
 36e:	cb 01       	movw	r24, r22
 370:	80 95       	com	r24
 372:	84 23       	and	r24, r20
 374:	8b bb       	out	0x1b, r24	; 27
 376:	08 95       	ret
		}
		break;
		
		/* PortB */
		case 1:
		if(Level == 1){
 378:	61 30       	cpi	r22, 0x01	; 1
 37a:	71 f4       	brne	.+28     	; 0x398 <Dio_WriteChannel+0x78>
			SET_BIT(PORTB,ChannelId%8);
 37c:	48 b3       	in	r20, 0x18	; 24
 37e:	87 70       	andi	r24, 0x07	; 7
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	b9 01       	movw	r22, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <Dio_WriteChannel+0x6c>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	8a 95       	dec	r24
 38e:	e2 f7       	brpl	.-8      	; 0x388 <Dio_WriteChannel+0x68>
 390:	cb 01       	movw	r24, r22
 392:	84 2b       	or	r24, r20
 394:	88 bb       	out	0x18, r24	; 24
 396:	08 95       	ret
		}else {
			CLR_BIT(PORTB,ChannelId%8);
 398:	48 b3       	in	r20, 0x18	; 24
 39a:	87 70       	andi	r24, 0x07	; 7
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <Dio_WriteChannel+0x88>
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	8a 95       	dec	r24
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <Dio_WriteChannel+0x84>
 3ac:	cb 01       	movw	r24, r22
 3ae:	80 95       	com	r24
 3b0:	84 23       	and	r24, r20
 3b2:	88 bb       	out	0x18, r24	; 24
 3b4:	08 95       	ret
		}
		break;
		
		/* PortC */
		case 2:
		if(Level == 1){
 3b6:	61 30       	cpi	r22, 0x01	; 1
 3b8:	71 f4       	brne	.+28     	; 0x3d6 <Dio_WriteChannel+0xb6>
			SET_BIT(PORTC,ChannelId%8);
 3ba:	45 b3       	in	r20, 0x15	; 21
 3bc:	87 70       	andi	r24, 0x07	; 7
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	b9 01       	movw	r22, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <Dio_WriteChannel+0xaa>
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	8a 95       	dec	r24
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <Dio_WriteChannel+0xa6>
 3ce:	cb 01       	movw	r24, r22
 3d0:	84 2b       	or	r24, r20
 3d2:	85 bb       	out	0x15, r24	; 21
 3d4:	08 95       	ret
		}else {
			CLR_BIT(PORTC,ChannelId%8);
 3d6:	45 b3       	in	r20, 0x15	; 21
 3d8:	87 70       	andi	r24, 0x07	; 7
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	b9 01       	movw	r22, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <Dio_WriteChannel+0xc6>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <Dio_WriteChannel+0xc2>
 3ea:	cb 01       	movw	r24, r22
 3ec:	80 95       	com	r24
 3ee:	84 23       	and	r24, r20
 3f0:	85 bb       	out	0x15, r24	; 21
 3f2:	08 95       	ret
		}
		break;
		
		/* PortD */
		case 3:
		if(Level == 1){
 3f4:	61 30       	cpi	r22, 0x01	; 1
 3f6:	71 f4       	brne	.+28     	; 0x414 <Dio_WriteChannel+0xf4>
			SET_BIT(PORTD,ChannelId%8);
 3f8:	42 b3       	in	r20, 0x12	; 18
 3fa:	87 70       	andi	r24, 0x07	; 7
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	b9 01       	movw	r22, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <Dio_WriteChannel+0xe8>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	8a 95       	dec	r24
 40a:	e2 f7       	brpl	.-8      	; 0x404 <Dio_WriteChannel+0xe4>
 40c:	cb 01       	movw	r24, r22
 40e:	84 2b       	or	r24, r20
 410:	82 bb       	out	0x12, r24	; 18
 412:	08 95       	ret
		}else {
			CLR_BIT(PORTD,ChannelId%8);
 414:	42 b3       	in	r20, 0x12	; 18
 416:	87 70       	andi	r24, 0x07	; 7
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	b9 01       	movw	r22, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <Dio_WriteChannel+0x104>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	8a 95       	dec	r24
 426:	e2 f7       	brpl	.-8      	; 0x420 <Dio_WriteChannel+0x100>
 428:	cb 01       	movw	r24, r22
 42a:	80 95       	com	r24
 42c:	84 23       	and	r24, r20
 42e:	82 bb       	out	0x12, r24	; 18
 430:	08 95       	ret

00000432 <Dio_ReadChannel>:
{
	/*volatile u8* PINs[4]={0x39,0x36,0x33,0x30};
	Dio_LevelType Ret = GET_BIT(*(volatile u8*)PINs[ChannelId/8],ChannelId%8);
	return Ret;*/
	Dio_LevelType Ret=0;
	switch(ChannelId/8)
 432:	98 2f       	mov	r25, r24
 434:	96 95       	lsr	r25
 436:	96 95       	lsr	r25
 438:	96 95       	lsr	r25
 43a:	91 30       	cpi	r25, 0x01	; 1
 43c:	91 f0       	breq	.+36     	; 0x462 <Dio_ReadChannel+0x30>
 43e:	91 30       	cpi	r25, 0x01	; 1
 440:	28 f0       	brcs	.+10     	; 0x44c <Dio_ReadChannel+0x1a>
 442:	92 30       	cpi	r25, 0x02	; 2
 444:	d1 f0       	breq	.+52     	; 0x47a <Dio_ReadChannel+0x48>
 446:	93 30       	cpi	r25, 0x03	; 3
 448:	81 f5       	brne	.+96     	; 0x4aa <Dio_ReadChannel+0x78>
 44a:	23 c0       	rjmp	.+70     	; 0x492 <Dio_ReadChannel+0x60>
	{
		case Dio_PORTA:
		Ret = GET_BIT(PINA,ChannelId);
 44c:	29 b3       	in	r18, 0x19	; 25
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	a9 01       	movw	r20, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <Dio_ReadChannel+0x26>
 454:	55 95       	asr	r21
 456:	47 95       	ror	r20
 458:	8a 95       	dec	r24
 45a:	e2 f7       	brpl	.-8      	; 0x454 <Dio_ReadChannel+0x22>
 45c:	ca 01       	movw	r24, r20
 45e:	81 70       	andi	r24, 0x01	; 1
		break;
 460:	08 95       	ret
		
		case Dio_PORTB:
		Ret = GET_BIT(PINB,ChannelId%8);
 462:	26 b3       	in	r18, 0x16	; 22
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	87 70       	andi	r24, 0x07	; 7
 468:	a9 01       	movw	r20, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <Dio_ReadChannel+0x3e>
 46c:	55 95       	asr	r21
 46e:	47 95       	ror	r20
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <Dio_ReadChannel+0x3a>
 474:	ca 01       	movw	r24, r20
 476:	81 70       	andi	r24, 0x01	; 1
		break;
 478:	08 95       	ret
		
		case Dio_PORTC:
		Ret = GET_BIT(PINC,ChannelId%8);
 47a:	23 b3       	in	r18, 0x13	; 19
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	87 70       	andi	r24, 0x07	; 7
 480:	a9 01       	movw	r20, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <Dio_ReadChannel+0x56>
 484:	55 95       	asr	r21
 486:	47 95       	ror	r20
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <Dio_ReadChannel+0x52>
 48c:	ca 01       	movw	r24, r20
 48e:	81 70       	andi	r24, 0x01	; 1
		break;
 490:	08 95       	ret
		
		case Dio_PORTD:
		Ret = GET_BIT(PIND,ChannelId%8);
 492:	20 b3       	in	r18, 0x10	; 16
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	87 70       	andi	r24, 0x07	; 7
 498:	a9 01       	movw	r20, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <Dio_ReadChannel+0x6e>
 49c:	55 95       	asr	r21
 49e:	47 95       	ror	r20
 4a0:	8a 95       	dec	r24
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <Dio_ReadChannel+0x6a>
 4a4:	ca 01       	movw	r24, r20
 4a6:	81 70       	andi	r24, 0x01	; 1
		break;
 4a8:	08 95       	ret
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
	/*volatile u8* PINs[4]={0x39,0x36,0x33,0x30};
	Dio_LevelType Ret = GET_BIT(*(volatile u8*)PINs[ChannelId/8],ChannelId%8);
	return Ret;*/
	Dio_LevelType Ret=0;
 4aa:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
		break;
	}
	return Ret;
}
 4ac:	08 95       	ret

000004ae <Dio_ReadPort>:
/*******************************************************************************************/
Dio_PortLevelType Dio_ReadPort(Dio_PortType PortId)
{
	Dio_PortLevelType Ret;
	switch(PortId)
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	49 f0       	breq	.+18     	; 0x4c4 <Dio_ReadPort+0x16>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	28 f0       	brcs	.+10     	; 0x4c0 <Dio_ReadPort+0x12>
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	39 f0       	breq	.+14     	; 0x4c8 <Dio_ReadPort+0x1a>
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	41 f4       	brne	.+16     	; 0x4ce <Dio_ReadPort+0x20>
 4be:	06 c0       	rjmp	.+12     	; 0x4cc <Dio_ReadPort+0x1e>
	{
		case Dio_PORTA:
			Ret = PINA;
 4c0:	89 b3       	in	r24, 0x19	; 25
			break;
 4c2:	08 95       	ret
		
		case Dio_PORTB:
			Ret = PINB;
 4c4:	86 b3       	in	r24, 0x16	; 22
			break;
 4c6:	08 95       	ret
			
		case Dio_PORTC:
			Ret = PINC;
 4c8:	83 b3       	in	r24, 0x13	; 19
			break;
 4ca:	08 95       	ret
			
		case Dio_PORTD:
			Ret = PIND;
 4cc:	80 b3       	in	r24, 0x10	; 16
			break;
			
		default:
			break;
	}
}
 4ce:	08 95       	ret

000004d0 <Dio_WritePort>:
/*******************************************************************************************/
void Dio_WritePort(Dio_PortType PortId,Dio_PortLevelType Level)
{
	switch(PortId)
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	49 f0       	breq	.+18     	; 0x4e6 <Dio_WritePort+0x16>
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	28 f0       	brcs	.+10     	; 0x4e2 <Dio_WritePort+0x12>
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	39 f0       	breq	.+14     	; 0x4ea <Dio_WritePort+0x1a>
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	41 f4       	brne	.+16     	; 0x4f0 <Dio_WritePort+0x20>
 4e0:	06 c0       	rjmp	.+12     	; 0x4ee <Dio_WritePort+0x1e>
	{
		case Dio_PORTA:
		PORTA = Level;
 4e2:	6b bb       	out	0x1b, r22	; 27
		break;
 4e4:	08 95       	ret
		
		case Dio_PORTB:
		PORTB = Level;
 4e6:	68 bb       	out	0x18, r22	; 24
		break;
 4e8:	08 95       	ret
		
		case Dio_PORTC:
		PORTC = Level;
 4ea:	65 bb       	out	0x15, r22	; 21
		break;
 4ec:	08 95       	ret
		
		case Dio_PORTD:
		PORTD = Level;
 4ee:	62 bb       	out	0x12, r22	; 18
 4f0:	08 95       	ret

000004f2 <Dio_FlipChannel>:

/*******************************************************************************************/
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
	Dio_LevelType Ret=0;
	switch(ChannelId/8)
 4f2:	98 2f       	mov	r25, r24
 4f4:	96 95       	lsr	r25
 4f6:	96 95       	lsr	r25
 4f8:	96 95       	lsr	r25
 4fa:	91 30       	cpi	r25, 0x01	; 1
 4fc:	f9 f0       	breq	.+62     	; 0x53c <Dio_FlipChannel+0x4a>
 4fe:	91 30       	cpi	r25, 0x01	; 1
 500:	30 f0       	brcs	.+12     	; 0x50e <Dio_FlipChannel+0x1c>
 502:	92 30       	cpi	r25, 0x02	; 2
 504:	a9 f1       	breq	.+106    	; 0x570 <Dio_FlipChannel+0x7e>
 506:	93 30       	cpi	r25, 0x03	; 3
 508:	09 f0       	breq	.+2      	; 0x50c <Dio_FlipChannel+0x1a>
 50a:	66 c0       	rjmp	.+204    	; 0x5d8 <Dio_FlipChannel+0xe6>
 50c:	4b c0       	rjmp	.+150    	; 0x5a4 <Dio_FlipChannel+0xb2>
	{
		case Dio_PORTA:
			TOG_BIT(PORTA,ChannelId);
 50e:	9b b3       	in	r25, 0x1b	; 27
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	9a 01       	movw	r18, r20
 516:	08 2e       	mov	r0, r24
 518:	02 c0       	rjmp	.+4      	; 0x51e <Dio_FlipChannel+0x2c>
 51a:	22 0f       	add	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	0a 94       	dec	r0
 520:	e2 f7       	brpl	.-8      	; 0x51a <Dio_FlipChannel+0x28>
 522:	29 27       	eor	r18, r25
 524:	2b bb       	out	0x1b, r18	; 27
			Ret = GET_BIT(PORTA,ChannelId);
 526:	2b b3       	in	r18, 0x1b	; 27
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	a9 01       	movw	r20, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <Dio_FlipChannel+0x40>
 52e:	55 95       	asr	r21
 530:	47 95       	ror	r20
 532:	8a 95       	dec	r24
 534:	e2 f7       	brpl	.-8      	; 0x52e <Dio_FlipChannel+0x3c>
 536:	ca 01       	movw	r24, r20
 538:	81 70       	andi	r24, 0x01	; 1
			break;
 53a:	08 95       	ret
		
		case Dio_PORTB:
			TOG_BIT(PORTB,ChannelId%8);
 53c:	68 b3       	in	r22, 0x18	; 24
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	87 70       	andi	r24, 0x07	; 7
 542:	90 70       	andi	r25, 0x00	; 0
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	9a 01       	movw	r18, r20
 54a:	08 2e       	mov	r0, r24
 54c:	02 c0       	rjmp	.+4      	; 0x552 <Dio_FlipChannel+0x60>
 54e:	22 0f       	add	r18, r18
 550:	33 1f       	adc	r19, r19
 552:	0a 94       	dec	r0
 554:	e2 f7       	brpl	.-8      	; 0x54e <Dio_FlipChannel+0x5c>
 556:	26 27       	eor	r18, r22
 558:	28 bb       	out	0x18, r18	; 24
			Ret = GET_BIT(PORTB,ChannelId%8);
 55a:	28 b3       	in	r18, 0x18	; 24
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	a9 01       	movw	r20, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <Dio_FlipChannel+0x74>
 562:	55 95       	asr	r21
 564:	47 95       	ror	r20
 566:	8a 95       	dec	r24
 568:	e2 f7       	brpl	.-8      	; 0x562 <Dio_FlipChannel+0x70>
 56a:	ca 01       	movw	r24, r20
 56c:	81 70       	andi	r24, 0x01	; 1
			break;
 56e:	08 95       	ret
		
		case Dio_PORTC:
			TOG_BIT(PORTC,ChannelId%8);
 570:	65 b3       	in	r22, 0x15	; 21
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	87 70       	andi	r24, 0x07	; 7
 576:	90 70       	andi	r25, 0x00	; 0
 578:	41 e0       	ldi	r20, 0x01	; 1
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	9a 01       	movw	r18, r20
 57e:	08 2e       	mov	r0, r24
 580:	02 c0       	rjmp	.+4      	; 0x586 <Dio_FlipChannel+0x94>
 582:	22 0f       	add	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <Dio_FlipChannel+0x90>
 58a:	26 27       	eor	r18, r22
 58c:	25 bb       	out	0x15, r18	; 21
			Ret = GET_BIT(PORTC,ChannelId%8);
 58e:	25 b3       	in	r18, 0x15	; 21
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	a9 01       	movw	r20, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <Dio_FlipChannel+0xa8>
 596:	55 95       	asr	r21
 598:	47 95       	ror	r20
 59a:	8a 95       	dec	r24
 59c:	e2 f7       	brpl	.-8      	; 0x596 <Dio_FlipChannel+0xa4>
 59e:	ca 01       	movw	r24, r20
 5a0:	81 70       	andi	r24, 0x01	; 1
			break;
 5a2:	08 95       	ret
		
		case Dio_PORTD:
			TOG_BIT(PORTD,ChannelId%8);
 5a4:	62 b3       	in	r22, 0x12	; 18
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	87 70       	andi	r24, 0x07	; 7
 5aa:	90 70       	andi	r25, 0x00	; 0
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	9a 01       	movw	r18, r20
 5b2:	08 2e       	mov	r0, r24
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <Dio_FlipChannel+0xc8>
 5b6:	22 0f       	add	r18, r18
 5b8:	33 1f       	adc	r19, r19
 5ba:	0a 94       	dec	r0
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <Dio_FlipChannel+0xc4>
 5be:	26 27       	eor	r18, r22
 5c0:	22 bb       	out	0x12, r18	; 18
			Ret = GET_BIT(PORTD,ChannelId%8);
 5c2:	22 b3       	in	r18, 0x12	; 18
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	a9 01       	movw	r20, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <Dio_FlipChannel+0xdc>
 5ca:	55 95       	asr	r21
 5cc:	47 95       	ror	r20
 5ce:	8a 95       	dec	r24
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <Dio_FlipChannel+0xd8>
 5d2:	ca 01       	movw	r24, r20
 5d4:	81 70       	andi	r24, 0x01	; 1
			break;
 5d6:	08 95       	ret
}

/*******************************************************************************************/
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
	Dio_LevelType Ret=0;
 5d8:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
			break;
	}
	return Ret;
}
 5da:	08 95       	ret

000005dc <GI_vEnable>:
#include "GIE_REGISTER.h"

/********************************************************************************/
void GI_vEnable(void)
{
	SET_BIT(SREG,I_BIT);
 5dc:	8f b7       	in	r24, 0x3f	; 63
 5de:	80 68       	ori	r24, 0x80	; 128
 5e0:	8f bf       	out	0x3f, r24	; 63
}
 5e2:	08 95       	ret

000005e4 <GI_vDisable>:
/********************************************************************************/
void GI_vDisable(void)
{
	CLR_BIT(SREG,I_BIT);
 5e4:	8f b7       	in	r24, 0x3f	; 63
 5e6:	8f 77       	andi	r24, 0x7F	; 127
 5e8:	8f bf       	out	0x3f, r24	; 63
}
 5ea:	08 95       	ret

000005ec <Port_Init>:

extern Port_ConfigType Port_cngs[MAX_NUMBER_OF_PINS];

/*******************************************************************************************/
void Port_Init(void)
{
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	21 e6       	ldi	r18, 0x61	; 97
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	e9 01       	movw	r28, r18
 5f6:	21 96       	adiw	r28, 0x01	; 1
#include "PORT_TYPES.h"

extern Port_ConfigType Port_cngs[MAX_NUMBER_OF_PINS];

/*******************************************************************************************/
void Port_Init(void)
 5f8:	41 ec       	ldi	r20, 0xC1	; 193
 5fa:	50 e0       	ldi	r21, 0x00	; 0
				
			case Dio_PORTB:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
					SET_BIT(DDRB,Port_cngs[i].Pin);
				}else {
					CLR_BIT(DDRB,Port_cngs[i].Pin);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	70 e0       	ldi	r23, 0x00	; 0
#include "PORT_TYPES.h"

extern Port_ConfigType Port_cngs[MAX_NUMBER_OF_PINS];

/*******************************************************************************************/
void Port_Init(void)
 600:	d9 01       	movw	r26, r18
 602:	f9 01       	movw	r30, r18
 604:	31 97       	sbiw	r30, 0x01	; 1
	{
		if(Port_cngs[i].Port==-1)
		{
			break;
		}
		switch(Port_cngs[i].Port)
 606:	80 81       	ld	r24, Z
 608:	81 30       	cpi	r24, 0x01	; 1
 60a:	11 f1       	breq	.+68     	; 0x650 <Port_Init+0x64>
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	30 f0       	brcs	.+12     	; 0x61c <Port_Init+0x30>
 610:	82 30       	cpi	r24, 0x02	; 2
 612:	c1 f1       	breq	.+112    	; 0x684 <Port_Init+0x98>
 614:	83 30       	cpi	r24, 0x03	; 3
 616:	09 f0       	breq	.+2      	; 0x61a <Port_Init+0x2e>
 618:	68 c0       	rjmp	.+208    	; 0x6ea <Port_Init+0xfe>
 61a:	4e c0       	rjmp	.+156    	; 0x6b8 <Port_Init+0xcc>
		{
			case Dio_PORTA:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
 61c:	88 81       	ld	r24, Y
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	59 f4       	brne	.+22     	; 0x638 <Port_Init+0x4c>
					SET_BIT(DDRA,Port_cngs[i].Pin);
 622:	ea b3       	in	r30, 0x1a	; 26
 624:	cb 01       	movw	r24, r22
 626:	0c 90       	ld	r0, X
 628:	02 c0       	rjmp	.+4      	; 0x62e <Port_Init+0x42>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	0a 94       	dec	r0
 630:	e2 f7       	brpl	.-8      	; 0x62a <Port_Init+0x3e>
 632:	8e 2b       	or	r24, r30
 634:	8a bb       	out	0x1a, r24	; 26
 636:	59 c0       	rjmp	.+178    	; 0x6ea <Port_Init+0xfe>
				}else {
					CLR_BIT(DDRA,Port_cngs[i].Pin);
 638:	ea b3       	in	r30, 0x1a	; 26
 63a:	cb 01       	movw	r24, r22
 63c:	0c 90       	ld	r0, X
 63e:	02 c0       	rjmp	.+4      	; 0x644 <Port_Init+0x58>
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	0a 94       	dec	r0
 646:	e2 f7       	brpl	.-8      	; 0x640 <Port_Init+0x54>
 648:	80 95       	com	r24
 64a:	8e 23       	and	r24, r30
 64c:	8a bb       	out	0x1a, r24	; 26
 64e:	4d c0       	rjmp	.+154    	; 0x6ea <Port_Init+0xfe>
				}
				break;
				
			case Dio_PORTB:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
 650:	88 81       	ld	r24, Y
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	59 f4       	brne	.+22     	; 0x66c <Port_Init+0x80>
					SET_BIT(DDRB,Port_cngs[i].Pin);
 656:	e7 b3       	in	r30, 0x17	; 23
 658:	cb 01       	movw	r24, r22
 65a:	0c 90       	ld	r0, X
 65c:	02 c0       	rjmp	.+4      	; 0x662 <Port_Init+0x76>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	0a 94       	dec	r0
 664:	e2 f7       	brpl	.-8      	; 0x65e <Port_Init+0x72>
 666:	8e 2b       	or	r24, r30
 668:	87 bb       	out	0x17, r24	; 23
 66a:	3f c0       	rjmp	.+126    	; 0x6ea <Port_Init+0xfe>
				}else {
					CLR_BIT(DDRB,Port_cngs[i].Pin);
 66c:	e7 b3       	in	r30, 0x17	; 23
 66e:	cb 01       	movw	r24, r22
 670:	0c 90       	ld	r0, X
 672:	02 c0       	rjmp	.+4      	; 0x678 <Port_Init+0x8c>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	0a 94       	dec	r0
 67a:	e2 f7       	brpl	.-8      	; 0x674 <Port_Init+0x88>
 67c:	80 95       	com	r24
 67e:	8e 23       	and	r24, r30
 680:	87 bb       	out	0x17, r24	; 23
 682:	33 c0       	rjmp	.+102    	; 0x6ea <Port_Init+0xfe>
				}
				break;
				
			case Dio_PORTC:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
 684:	88 81       	ld	r24, Y
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	59 f4       	brne	.+22     	; 0x6a0 <Port_Init+0xb4>
					SET_BIT(DDRC,Port_cngs[i].Pin);
 68a:	e4 b3       	in	r30, 0x14	; 20
 68c:	cb 01       	movw	r24, r22
 68e:	0c 90       	ld	r0, X
 690:	02 c0       	rjmp	.+4      	; 0x696 <Port_Init+0xaa>
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	0a 94       	dec	r0
 698:	e2 f7       	brpl	.-8      	; 0x692 <Port_Init+0xa6>
 69a:	8e 2b       	or	r24, r30
 69c:	84 bb       	out	0x14, r24	; 20
 69e:	25 c0       	rjmp	.+74     	; 0x6ea <Port_Init+0xfe>
				}else {
					CLR_BIT(DDRC,Port_cngs[i].Pin);
 6a0:	e4 b3       	in	r30, 0x14	; 20
 6a2:	cb 01       	movw	r24, r22
 6a4:	0c 90       	ld	r0, X
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <Port_Init+0xc0>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	0a 94       	dec	r0
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <Port_Init+0xbc>
 6b0:	80 95       	com	r24
 6b2:	8e 23       	and	r24, r30
 6b4:	84 bb       	out	0x14, r24	; 20
 6b6:	19 c0       	rjmp	.+50     	; 0x6ea <Port_Init+0xfe>
				}
				break;
				
			case Dio_PORTD:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
 6b8:	88 81       	ld	r24, Y
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	59 f4       	brne	.+22     	; 0x6d4 <Port_Init+0xe8>
					SET_BIT(DDRD,Port_cngs[i].Pin);
 6be:	e1 b3       	in	r30, 0x11	; 17
 6c0:	cb 01       	movw	r24, r22
 6c2:	0c 90       	ld	r0, X
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <Port_Init+0xde>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	0a 94       	dec	r0
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <Port_Init+0xda>
 6ce:	8e 2b       	or	r24, r30
 6d0:	81 bb       	out	0x11, r24	; 17
 6d2:	0b c0       	rjmp	.+22     	; 0x6ea <Port_Init+0xfe>
				}else {
					CLR_BIT(DDRD,Port_cngs[i].Pin);
 6d4:	e1 b3       	in	r30, 0x11	; 17
 6d6:	cb 01       	movw	r24, r22
 6d8:	0c 90       	ld	r0, X
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <Port_Init+0xf4>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	0a 94       	dec	r0
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <Port_Init+0xf0>
 6e4:	80 95       	com	r24
 6e6:	8e 23       	and	r24, r30
 6e8:	81 bb       	out	0x11, r24	; 17
 6ea:	2d 5f       	subi	r18, 0xFD	; 253
 6ec:	3f 4f       	sbci	r19, 0xFF	; 255
 6ee:	23 96       	adiw	r28, 0x03	; 3

/*******************************************************************************************/
void Port_Init(void)
{
	u8 i=0;
	for(i=0 ; i<MAX_NUMBER_OF_PINS ; i++)
 6f0:	24 17       	cp	r18, r20
 6f2:	35 07       	cpc	r19, r21
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <Port_Init+0x10c>
 6f6:	84 cf       	rjmp	.-248    	; 0x600 <Port_Init+0x14>
				
			default:
				break;
		}
	}
}
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <TMR0_vInit>:
	
	
	/******************* CTC Mode *******************/
	#elif TMR0_MODE == TMR0_CTC_MODE
	// Set CTC Mode: WGM01:0 = 10
	CLR_BIT(TCCR0,WGM00);
 6fe:	83 b7       	in	r24, 0x33	; 51
 700:	8f 7b       	andi	r24, 0xBF	; 191
 702:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 704:	83 b7       	in	r24, 0x33	; 51
 706:	88 60       	ori	r24, 0x08	; 8
 708:	83 bf       	out	0x33, r24	; 51
	
	// Enable Compare Match Interrupt
	SET_BIT(TIMSK,OCIE0);
 70a:	89 b7       	in	r24, 0x39	; 57
 70c:	82 60       	ori	r24, 0x02	; 2
 70e:	89 bf       	out	0x39, r24	; 57
	
	#endif
	/*****************************************/
	#endif
	
}
 710:	08 95       	ret

00000712 <TMR0_vStart>:
	SET_BIT(TCCR0,CS01);
	CLR_BIT(TCCR0,CS02);
	
	//CS02:0 = 011
	#elif TMR0_PRESCALAR == TMR0_PRESCALAR_64
	SET_BIT(TCCR0,CS00);
 712:	83 b7       	in	r24, 0x33	; 51
 714:	81 60       	ori	r24, 0x01	; 1
 716:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
 718:	83 b7       	in	r24, 0x33	; 51
 71a:	82 60       	ori	r24, 0x02	; 2
 71c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
 71e:	83 b7       	in	r24, 0x33	; 51
 720:	8b 7f       	andi	r24, 0xFB	; 251
 722:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);
	
	#endif
	
}
 724:	08 95       	ret

00000726 <TMR0_vStop>:
/*************************************************************************************************/

void TMR0_vStop(void)
{
	//CS02:0 = 000, No clock source (Timer/Counter stopped).
	TCCR0 &= ~(0x07);
 726:	83 b7       	in	r24, 0x33	; 51
 728:	88 7f       	andi	r24, 0xF8	; 248
 72a:	83 bf       	out	0x33, r24	; 51
}
 72c:	08 95       	ret

0000072e <TMR0_vSetDutyCycle_PWM>:
		
		#endif
		
		#endif
	}
}
 72e:	08 95       	ret

00000730 <TMR0_vSetCompareMatchValue>:
/*************************************************************************************************/

void TMR0_vSetCompareMatchValue(u8 Copy_u8OCRValue)
{
	OCR0 = Copy_u8OCRValue;
 730:	8c bf       	out	0x3c, r24	; 60
}
 732:	08 95       	ret

00000734 <TMR0_vSetDelay_ms_UsingCTC>:
	OCR0 = 249 ;
	Priv_CtcCounter = Copy_u16Delay_ms*8;
	
	#elif TMR0_PRESCALAR == TMR0_PRESCALAR_64
	//under condition -> tick time = 4 uSec. 
	OCR0 = 249 ;
 734:	29 ef       	ldi	r18, 0xF9	; 249
 736:	2c bf       	out	0x3c, r18	; 60
	Priv_CtcCounter = Copy_u16Delay_ms;
 738:	90 93 a3 00 	sts	0x00A3, r25
 73c:	80 93 a2 00 	sts	0x00A2, r24
	#elif TMR0_PRESCALAR == TMR0_PRESCALAR_1024
	
	#endif
	
	
}
 740:	08 95       	ret

00000742 <TMR0_vSetCallBack_OVF>:
/*************************************************************************************************/

void TMR0_vSetCallBack_OVF(void (*ptr)(void))
{
	Priv_vSetCallBack_OVF = ptr;
 742:	90 93 a5 00 	sts	0x00A5, r25
 746:	80 93 a4 00 	sts	0x00A4, r24
}
 74a:	08 95       	ret

0000074c <TMR0_vSetCallBack_COMP>:
/*************************************************************************************************/

void TMR0_vSetCallBack_COMP(void (*ptr)(void))
{
	Priv_vSetCallBack_COMP = ptr;
 74c:	90 93 a7 00 	sts	0x00A7, r25
 750:	80 93 a6 00 	sts	0x00A6, r24
}
 754:	08 95       	ret

00000756 <__vector_11>:
/*************************************************************************************************/

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	ef 93       	push	r30
 776:	ff 93       	push	r31
	static u16 Local_u16OVFCounter = 0;
	Local_u16OVFCounter++;
 778:	80 91 a8 00 	lds	r24, 0x00A8
 77c:	90 91 a9 00 	lds	r25, 0x00A9
 780:	01 96       	adiw	r24, 0x01	; 1
 782:	90 93 a9 00 	sts	0x00A9, r25
 786:	80 93 a8 00 	sts	0x00A8, r24
	if(Local_u16OVFCounter == TMR0_OVF_COUNTER)
 78a:	23 e0       	ldi	r18, 0x03	; 3
 78c:	81 3d       	cpi	r24, 0xD1	; 209
 78e:	92 07       	cpc	r25, r18
 790:	69 f4       	brne	.+26     	; 0x7ac <__vector_11+0x56>
	{
		TCNT0 = TMR0_PRELOAD_VALUE;
 792:	81 e7       	ldi	r24, 0x71	; 113
 794:	82 bf       	out	0x32, r24	; 50
		Local_u16OVFCounter = 0;
 796:	10 92 a9 00 	sts	0x00A9, r1
 79a:	10 92 a8 00 	sts	0x00A8, r1
		if(Priv_vSetCallBack_OVF != NULL)
 79e:	e0 91 a4 00 	lds	r30, 0x00A4
 7a2:	f0 91 a5 00 	lds	r31, 0x00A5
 7a6:	30 97       	sbiw	r30, 0x00	; 0
 7a8:	09 f0       	breq	.+2      	; 0x7ac <__vector_11+0x56>
		{
			Priv_vSetCallBack_OVF();	//call the action
 7aa:	09 95       	icall
		}
	}
}
 7ac:	ff 91       	pop	r31
 7ae:	ef 91       	pop	r30
 7b0:	bf 91       	pop	r27
 7b2:	af 91       	pop	r26
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	7f 91       	pop	r23
 7ba:	6f 91       	pop	r22
 7bc:	5f 91       	pop	r21
 7be:	4f 91       	pop	r20
 7c0:	3f 91       	pop	r19
 7c2:	2f 91       	pop	r18
 7c4:	0f 90       	pop	r0
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	0f 90       	pop	r0
 7ca:	1f 90       	pop	r1
 7cc:	18 95       	reti

000007ce <__vector_10>:

/*************************************************************************************************/
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 7ce:	1f 92       	push	r1
 7d0:	0f 92       	push	r0
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	0f 92       	push	r0
 7d6:	11 24       	eor	r1, r1
 7d8:	2f 93       	push	r18
 7da:	3f 93       	push	r19
 7dc:	4f 93       	push	r20
 7de:	5f 93       	push	r21
 7e0:	6f 93       	push	r22
 7e2:	7f 93       	push	r23
 7e4:	8f 93       	push	r24
 7e6:	9f 93       	push	r25
 7e8:	af 93       	push	r26
 7ea:	bf 93       	push	r27
 7ec:	ef 93       	push	r30
 7ee:	ff 93       	push	r31
	static u16 Local_u16COMPCounter = 0;
	Local_u16COMPCounter++;
 7f0:	80 91 aa 00 	lds	r24, 0x00AA
 7f4:	90 91 ab 00 	lds	r25, 0x00AB
 7f8:	01 96       	adiw	r24, 0x01	; 1
 7fa:	90 93 ab 00 	sts	0x00AB, r25
 7fe:	80 93 aa 00 	sts	0x00AA, r24
	if(Local_u16COMPCounter == Priv_CtcCounter)
 802:	20 91 a2 00 	lds	r18, 0x00A2
 806:	30 91 a3 00 	lds	r19, 0x00A3
 80a:	82 17       	cp	r24, r18
 80c:	93 07       	cpc	r25, r19
 80e:	59 f4       	brne	.+22     	; 0x826 <__vector_10+0x58>
	{
		Local_u16COMPCounter = 0;
 810:	10 92 ab 00 	sts	0x00AB, r1
 814:	10 92 aa 00 	sts	0x00AA, r1
		if(Priv_vSetCallBack_COMP != NULL)
 818:	e0 91 a6 00 	lds	r30, 0x00A6
 81c:	f0 91 a7 00 	lds	r31, 0x00A7
 820:	30 97       	sbiw	r30, 0x00	; 0
 822:	09 f0       	breq	.+2      	; 0x826 <__vector_10+0x58>
		{
			Priv_vSetCallBack_COMP();	//call the action
 824:	09 95       	icall
		}
	}
}
 826:	ff 91       	pop	r31
 828:	ef 91       	pop	r30
 82a:	bf 91       	pop	r27
 82c:	af 91       	pop	r26
 82e:	9f 91       	pop	r25
 830:	8f 91       	pop	r24
 832:	7f 91       	pop	r23
 834:	6f 91       	pop	r22
 836:	5f 91       	pop	r21
 838:	4f 91       	pop	r20
 83a:	3f 91       	pop	r19
 83c:	2f 91       	pop	r18
 83e:	0f 90       	pop	r0
 840:	0f be       	out	0x3f, r0	; 63
 842:	0f 90       	pop	r0
 844:	1f 90       	pop	r1
 846:	18 95       	reti

00000848 <Create_Task>:

volatile u8 chosen_task = 255;
volatile BaseType_t choose_Done = pdFALSE;
/******************************************************************************/
BaseType_t Create_Task(void (*ptr)(void),u8 Priority,u16 priodicity,u16 First_d)
{
 848:	0f 93       	push	r16
 84a:	1f 93       	push	r17
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	dc 01       	movw	r26, r24
 852:	ea 01       	movw	r28, r20
 854:	89 01       	movw	r16, r18
	for(u8 i=0 ; i<MAX_NUMBER_OF_SAME_PRIORITY ; i++)
	{
		if(Task_arr[Priority][i].func==NULL && ptr != NULL)
 856:	70 e0       	ldi	r23, 0x00	; 0
u8 Number_of_Tasks ;

volatile u8 chosen_task = 255;
volatile BaseType_t choose_Done = pdFALSE;
/******************************************************************************/
BaseType_t Create_Task(void (*ptr)(void),u8 Priority,u16 priodicity,u16 First_d)
 858:	cb 01       	movw	r24, r22
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	86 0f       	add	r24, r22
 860:	97 1f       	adc	r25, r23
 862:	fc 01       	movw	r30, r24
 864:	ee 0f       	add	r30, r30
 866:	ff 1f       	adc	r31, r31
 868:	ee 0f       	add	r30, r30
 86a:	ff 1f       	adc	r31, r31
 86c:	ee 0f       	add	r30, r30
 86e:	ff 1f       	adc	r31, r31
 870:	e8 1b       	sub	r30, r24
 872:	f9 0b       	sbc	r31, r25
 874:	e4 54       	subi	r30, 0x44	; 68
 876:	ff 4f       	sbci	r31, 0xFF	; 255
 878:	20 e0       	ldi	r18, 0x00	; 0
 87a:	30 e0       	ldi	r19, 0x00	; 0
{
	for(u8 i=0 ; i<MAX_NUMBER_OF_SAME_PRIORITY ; i++)
	{
		if(Task_arr[Priority][i].func==NULL && ptr != NULL)
 87c:	a9 01       	movw	r20, r18
 87e:	80 81       	ld	r24, Z
 880:	91 81       	ldd	r25, Z+1	; 0x01
 882:	00 97       	sbiw	r24, 0x00	; 0
 884:	51 f5       	brne	.+84     	; 0x8da <__stack+0x7b>
 886:	10 97       	sbiw	r26, 0x00	; 0
 888:	41 f1       	breq	.+80     	; 0x8da <__stack+0x7b>
		{
			Task_arr[Priority][i].func = ptr;
 88a:	c9 01       	movw	r24, r18
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	9c 01       	movw	r18, r24
 89a:	24 1b       	sub	r18, r20
 89c:	35 0b       	sbc	r19, r21
 89e:	a9 01       	movw	r20, r18
 8a0:	cb 01       	movw	r24, r22
 8a2:	88 0f       	add	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	86 0f       	add	r24, r22
 8a8:	97 1f       	adc	r25, r23
 8aa:	9c 01       	movw	r18, r24
 8ac:	22 0f       	add	r18, r18
 8ae:	33 1f       	adc	r19, r19
 8b0:	22 0f       	add	r18, r18
 8b2:	33 1f       	adc	r19, r19
 8b4:	22 0f       	add	r18, r18
 8b6:	33 1f       	adc	r19, r19
 8b8:	28 1b       	sub	r18, r24
 8ba:	39 0b       	sbc	r19, r25
 8bc:	24 0f       	add	r18, r20
 8be:	35 1f       	adc	r19, r21
 8c0:	f9 01       	movw	r30, r18
 8c2:	e9 54       	subi	r30, 0x49	; 73
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	b6 83       	std	Z+6, r27	; 0x06
 8c8:	a5 83       	std	Z+5, r26	; 0x05
			Task_arr[Priority][i].Periodicity = priodicity;
 8ca:	d1 83       	std	Z+1, r29	; 0x01
 8cc:	c0 83       	st	Z, r28
			Task_arr[Priority][i].First_delay = First_d;
 8ce:	13 83       	std	Z+3, r17	; 0x03
 8d0:	02 83       	std	Z+2, r16	; 0x02
			Task_arr[Priority][i].state = Ready;
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	84 83       	std	Z+4, r24	; 0x04
			return pdTRUE;
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	07 c0       	rjmp	.+14     	; 0x8e8 <__stack+0x89>
 8da:	2f 5f       	subi	r18, 0xFF	; 255
 8dc:	3f 4f       	sbci	r19, 0xFF	; 255
 8de:	37 96       	adiw	r30, 0x07	; 7
volatile u8 chosen_task = 255;
volatile BaseType_t choose_Done = pdFALSE;
/******************************************************************************/
BaseType_t Create_Task(void (*ptr)(void),u8 Priority,u16 priodicity,u16 First_d)
{
	for(u8 i=0 ; i<MAX_NUMBER_OF_SAME_PRIORITY ; i++)
 8e0:	23 30       	cpi	r18, 0x03	; 3
 8e2:	31 05       	cpc	r19, r1
 8e4:	59 f6       	brne	.-106    	; 0x87c <__stack+0x1d>
			Task_arr[Priority][i].First_delay = First_d;
			Task_arr[Priority][i].state = Ready;
			return pdTRUE;
		}
	}
	return pdFALSE;
 8e6:	81 e0       	ldi	r24, 0x01	; 1
}
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	1f 91       	pop	r17
 8ee:	0f 91       	pop	r16
 8f0:	08 95       	ret

000008f2 <Task_Delete>:

/******************************************************************************/
BaseType_t Task_Delete(void(*ptr)(void))
{
 8f2:	ac 01       	movw	r20, r24
				Task_arr[i][j].state = Dormant;
				return pdTRUE;
			}
		}
	}
	return pdFALSE;
 8f4:	ec eb       	ldi	r30, 0xBC	; 188
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
	u8 i,j;
	for(i=0 ; i<MAX_NUMBER_OF_PRIORITY ; i++)
	{
		for(j=0 ; j<MAX_NUMBER_OF_SAME_PRIORITY ; j++)
		{
			if(Task_arr[i][j].func == ptr)
 8f8:	20 e0       	ldi	r18, 0x00	; 0
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	2f c0       	rjmp	.+94     	; 0x95c <Task_Delete+0x6a>
 8fe:	21 e0       	ldi	r18, 0x01	; 1
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	05 c0       	rjmp	.+10     	; 0x90e <Task_Delete+0x1c>
 904:	22 e0       	ldi	r18, 0x02	; 2
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	02 c0       	rjmp	.+4      	; 0x90e <Task_Delete+0x1c>
 90a:	20 e0       	ldi	r18, 0x00	; 0
 90c:	30 e0       	ldi	r19, 0x00	; 0
			{
				Task_arr[i][j].func = NULL;
 90e:	c9 01       	movw	r24, r18
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	88 0f       	add	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	82 1b       	sub	r24, r18
 91e:	93 0b       	sbc	r25, r19
 920:	9b 01       	movw	r18, r22
 922:	22 0f       	add	r18, r18
 924:	33 1f       	adc	r19, r19
 926:	62 0f       	add	r22, r18
 928:	73 1f       	adc	r23, r19
 92a:	fb 01       	movw	r30, r22
 92c:	ee 0f       	add	r30, r30
 92e:	ff 1f       	adc	r31, r31
 930:	ee 0f       	add	r30, r30
 932:	ff 1f       	adc	r31, r31
 934:	ee 0f       	add	r30, r30
 936:	ff 1f       	adc	r31, r31
 938:	e6 1b       	sub	r30, r22
 93a:	f7 0b       	sbc	r31, r23
 93c:	8e 0f       	add	r24, r30
 93e:	9f 1f       	adc	r25, r31
 940:	fc 01       	movw	r30, r24
 942:	e9 54       	subi	r30, 0x49	; 73
 944:	ff 4f       	sbci	r31, 0xFF	; 255
 946:	16 82       	std	Z+6, r1	; 0x06
 948:	15 82       	std	Z+5, r1	; 0x05
				Task_arr[i][j].state = Dormant;
 94a:	14 82       	std	Z+4, r1	; 0x04
				return pdTRUE;
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	08 95       	ret
 950:	2f 5f       	subi	r18, 0xFF	; 255
 952:	3f 4f       	sbci	r19, 0xFF	; 255
 954:	75 96       	adiw	r30, 0x15	; 21

/******************************************************************************/
BaseType_t Task_Delete(void(*ptr)(void))
{
	u8 i,j;
	for(i=0 ; i<MAX_NUMBER_OF_PRIORITY ; i++)
 956:	2a 30       	cpi	r18, 0x0A	; 10
 958:	31 05       	cpc	r19, r1
 95a:	89 f0       	breq	.+34     	; 0x97e <Task_Delete+0x8c>
	{
		for(j=0 ; j<MAX_NUMBER_OF_SAME_PRIORITY ; j++)
		{
			if(Task_arr[i][j].func == ptr)
 95c:	b9 01       	movw	r22, r18
 95e:	80 81       	ld	r24, Z
 960:	91 81       	ldd	r25, Z+1	; 0x01
 962:	84 17       	cp	r24, r20
 964:	95 07       	cpc	r25, r21
 966:	89 f2       	breq	.-94     	; 0x90a <Task_Delete+0x18>
 968:	87 81       	ldd	r24, Z+7	; 0x07
 96a:	90 85       	ldd	r25, Z+8	; 0x08
 96c:	84 17       	cp	r24, r20
 96e:	95 07       	cpc	r25, r21
 970:	31 f2       	breq	.-116    	; 0x8fe <Task_Delete+0xc>
 972:	86 85       	ldd	r24, Z+14	; 0x0e
 974:	97 85       	ldd	r25, Z+15	; 0x0f
 976:	84 17       	cp	r24, r20
 978:	95 07       	cpc	r25, r21
 97a:	51 f7       	brne	.-44     	; 0x950 <Task_Delete+0x5e>
 97c:	c3 cf       	rjmp	.-122    	; 0x904 <Task_Delete+0x12>
				Task_arr[i][j].state = Dormant;
				return pdTRUE;
			}
		}
	}
	return pdFALSE;
 97e:	81 e0       	ldi	r24, 0x01	; 1
}
 980:	08 95       	ret

00000982 <Schedular>:

/******************************************************************************/
void Schedular(void)
{
 982:	9f 92       	push	r9
 984:	af 92       	push	r10
 986:	bf 92       	push	r11
 988:	cf 92       	push	r12
 98a:	df 92       	push	r13
 98c:	ef 92       	push	r14
 98e:	ff 92       	push	r15
 990:	0f 93       	push	r16
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
	}
	return pdFALSE;
}

/******************************************************************************/
void Schedular(void)
 998:	0f 2e       	mov	r0, r31
 99a:	f1 eb       	ldi	r31, 0xB1	; 177
 99c:	af 2e       	mov	r10, r31
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	bf 2e       	mov	r11, r31
 9a2:	f0 2d       	mov	r31, r0
 9a4:	cc 24       	eor	r12, r12
 9a6:	dd 24       	eor	r13, r13
 9a8:	0f 2e       	mov	r0, r31
 9aa:	f3 e0       	ldi	r31, 0x03	; 3
 9ac:	9f 2e       	mov	r9, r31
 9ae:	f0 2d       	mov	r31, r0
 9b0:	35 c0       	rjmp	.+106    	; 0xa1c <Schedular+0x9a>
	u8 i,j;
	for(i=0 ; i<MAX_NUMBER_OF_PRIORITY ; i++)
	{
		for(j=0 ; j<MAX_NUMBER_OF_SAME_PRIORITY ; j++)
		{
			if(Task_arr[i][j].func != NULL)
 9b2:	ed 81       	ldd	r30, Y+5	; 0x05
 9b4:	fe 81       	ldd	r31, Y+6	; 0x06
 9b6:	30 97       	sbiw	r30, 0x00	; 0
 9b8:	91 f0       	breq	.+36     	; 0x9de <Schedular+0x5c>
			{
				if(Task_arr[i][j].First_delay == 0 && chosen_task == 255)
 9ba:	8a 81       	ldd	r24, Y+2	; 0x02
 9bc:	9b 81       	ldd	r25, Y+3	; 0x03
 9be:	00 97       	sbiw	r24, 0x00	; 0
 9c0:	59 f4       	brne	.+22     	; 0x9d8 <Schedular+0x56>
 9c2:	80 91 7f 00 	lds	r24, 0x007F
 9c6:	8f 3f       	cpi	r24, 0xFF	; 255
 9c8:	51 f4       	brne	.+20     	; 0x9de <Schedular+0x5c>
				{
					Task_arr[i][j].func();
 9ca:	09 95       	icall
					Task_arr[i][j].First_delay = Task_arr[i][j].Periodicity-1;
 9cc:	88 81       	ld	r24, Y
 9ce:	99 81       	ldd	r25, Y+1	; 0x01
 9d0:	01 97       	sbiw	r24, 0x01	; 1
 9d2:	9b 83       	std	Y+3, r25	; 0x03
 9d4:	8a 83       	std	Y+2, r24	; 0x02
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <Schedular+0x5c>
				}
				else if(Task_arr[i][j].First_delay != 0)
				{
					Task_arr[i][j].First_delay --;
 9d8:	01 97       	sbiw	r24, 0x01	; 1
 9da:	9b 83       	std	Y+3, r25	; 0x03
 9dc:	8a 83       	std	Y+2, r24	; 0x02
 9de:	11 50       	subi	r17, 0x01	; 1
 9e0:	27 96       	adiw	r28, 0x07	; 7
{
	static u32 counter = 0;
	u8 i,j;
	for(i=0 ; i<MAX_NUMBER_OF_PRIORITY ; i++)
	{
		for(j=0 ; j<MAX_NUMBER_OF_SAME_PRIORITY ; j++)
 9e2:	11 23       	and	r17, r17
 9e4:	31 f7       	brne	.-52     	; 0x9b2 <Schedular+0x30>
					Task_arr[i][j].First_delay --;
				}
			}
		}
		
		if(i<Number_of_Semaphores && sema_arr[i]->TimeOut>0)
 9e6:	80 91 ac 00 	lds	r24, 0x00AC
 9ea:	08 17       	cp	r16, r24
 9ec:	60 f4       	brcc	.+24     	; 0xa06 <Schedular+0x84>
 9ee:	d5 01       	movw	r26, r10
 9f0:	ed 91       	ld	r30, X+
 9f2:	fc 91       	ld	r31, X
 9f4:	11 97       	sbiw	r26, 0x01	; 1
 9f6:	82 81       	ldd	r24, Z+2	; 0x02
 9f8:	93 81       	ldd	r25, Z+3	; 0x03
 9fa:	18 16       	cp	r1, r24
 9fc:	19 06       	cpc	r1, r25
 9fe:	1c f4       	brge	.+6      	; 0xa06 <Schedular+0x84>
		{
			sema_arr[i]->TimeOut--;
 a00:	01 97       	sbiw	r24, 0x01	; 1
 a02:	93 83       	std	Z+3, r25	; 0x03
 a04:	82 83       	std	Z+2, r24	; 0x02
 a06:	08 94       	sec
 a08:	c1 1c       	adc	r12, r1
 a0a:	d1 1c       	adc	r13, r1
 a0c:	e2 e0       	ldi	r30, 0x02	; 2
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	ae 0e       	add	r10, r30
 a12:	bf 1e       	adc	r11, r31
/******************************************************************************/
void Schedular(void)
{
	static u32 counter = 0;
	u8 i,j;
	for(i=0 ; i<MAX_NUMBER_OF_PRIORITY ; i++)
 a14:	fa e0       	ldi	r31, 0x0A	; 10
 a16:	cf 16       	cp	r12, r31
 a18:	d1 04       	cpc	r13, r1
 a1a:	99 f0       	breq	.+38     	; 0xa42 <Schedular+0xc0>
 a1c:	0c 2d       	mov	r16, r12
	}
	return pdFALSE;
}

/******************************************************************************/
void Schedular(void)
 a1e:	c6 01       	movw	r24, r12
 a20:	88 0f       	add	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	8c 0d       	add	r24, r12
 a26:	9d 1d       	adc	r25, r13
 a28:	ec 01       	movw	r28, r24
 a2a:	cc 0f       	add	r28, r28
 a2c:	dd 1f       	adc	r29, r29
 a2e:	cc 0f       	add	r28, r28
 a30:	dd 1f       	adc	r29, r29
 a32:	cc 0f       	add	r28, r28
 a34:	dd 1f       	adc	r29, r29
 a36:	c8 1b       	sub	r28, r24
 a38:	d9 0b       	sbc	r29, r25
 a3a:	c9 54       	subi	r28, 0x49	; 73
 a3c:	df 4f       	sbci	r29, 0xFF	; 255
 a3e:	19 2d       	mov	r17, r9
 a40:	b8 cf       	rjmp	.-144    	; 0x9b2 <Schedular+0x30>
		if(i<Number_of_Semaphores && sema_arr[i]->TimeOut>0)
		{
			sema_arr[i]->TimeOut--;
		}
	}
	counter++;
 a42:	80 91 ad 00 	lds	r24, 0x00AD
 a46:	90 91 ae 00 	lds	r25, 0x00AE
 a4a:	a0 91 af 00 	lds	r26, 0x00AF
 a4e:	b0 91 b0 00 	lds	r27, 0x00B0
 a52:	01 96       	adiw	r24, 0x01	; 1
 a54:	a1 1d       	adc	r26, r1
 a56:	b1 1d       	adc	r27, r1
 a58:	80 93 ad 00 	sts	0x00AD, r24
 a5c:	90 93 ae 00 	sts	0x00AE, r25
 a60:	a0 93 af 00 	sts	0x00AF, r26
 a64:	b0 93 b0 00 	sts	0x00B0, r27
}
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	1f 91       	pop	r17
 a6e:	0f 91       	pop	r16
 a70:	ff 90       	pop	r15
 a72:	ef 90       	pop	r14
 a74:	df 90       	pop	r13
 a76:	cf 90       	pop	r12
 a78:	bf 90       	pop	r11
 a7a:	af 90       	pop	r10
 a7c:	9f 90       	pop	r9
 a7e:	08 95       	ret

00000a80 <TMR0_ISR>:
u8 Number_of_Semaphores = 0;

/****************************************************************************/
void TMR0_ISR(void)
{
	Schedular();
 a80:	0e 94 c1 04 	call	0x982	; 0x982 <Schedular>
}
 a84:	08 95       	ret

00000a86 <Start_System>:

/******************************************************************************/

void Start_System(void)
{
	GI_vEnable();
 a86:	0e 94 ee 02 	call	0x5dc	; 0x5dc <GI_vEnable>
	TMR0_vInit();
 a8a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TMR0_vInit>
	TMR0_vSetDelay_ms_UsingCTC(TICK_TIME);
 a8e:	81 e0       	ldi	r24, 0x01	; 1
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 9a 03 	call	0x734	; 0x734 <TMR0_vSetDelay_ms_UsingCTC>
	TMR0_vSetCallBack_COMP(TMR0_ISR);
 a96:	80 e4       	ldi	r24, 0x40	; 64
 a98:	95 e0       	ldi	r25, 0x05	; 5
 a9a:	0e 94 a6 03 	call	0x74c	; 0x74c <TMR0_vSetCallBack_COMP>
	TMR0_vStart();
 a9e:	0e 94 89 03 	call	0x712	; 0x712 <TMR0_vStart>
	choose_Done == pdFALSE;
 aa2:	80 91 7e 00 	lds	r24, 0x007E
}
 aa6:	08 95       	ret

00000aa8 <Create_SemaphoreBinary>:
/******************************************************************************/

/********************************* Semaphore *********************************/

void Create_SemaphoreBinary(semaphore_t* semaphore)
{
 aa8:	fc 01       	movw	r30, r24
	semaphore->create = SEMAPHORE_CREATE_YES;
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	80 83       	st	Z, r24
	semaphore->state = SEMAPHORE_NOT_USED;
 aae:	82 e0       	ldi	r24, 0x02	; 2
 ab0:	81 83       	std	Z+1, r24	; 0x01
	semaphore->TimeOut = 0;
 ab2:	13 82       	std	Z+3, r1	; 0x03
 ab4:	12 82       	std	Z+2, r1	; 0x02
	sema_arr[Number_of_Semaphores] = semaphore;
 ab6:	80 91 ac 00 	lds	r24, 0x00AC
 aba:	a8 2f       	mov	r26, r24
 abc:	b0 e0       	ldi	r27, 0x00	; 0
 abe:	aa 0f       	add	r26, r26
 ac0:	bb 1f       	adc	r27, r27
 ac2:	af 54       	subi	r26, 0x4F	; 79
 ac4:	bf 4f       	sbci	r27, 0xFF	; 255
 ac6:	11 96       	adiw	r26, 0x01	; 1
 ac8:	fc 93       	st	X, r31
 aca:	ee 93       	st	-X, r30
	Number_of_Semaphores++;
 acc:	8f 5f       	subi	r24, 0xFF	; 255
 ace:	80 93 ac 00 	sts	0x00AC, r24
}
 ad2:	08 95       	ret

00000ad4 <Semaphore_Take>:

/******************************************************************************/

BaseType_t Semaphore_Take(semaphore_t* semaphore,u16 TimeOut)
{
 ad4:	fc 01       	movw	r30, r24
	semaphore->TimeOut = TimeOut;
 ad6:	86 2f       	mov	r24, r22
 ad8:	97 2f       	mov	r25, r23
 ada:	93 83       	std	Z+3, r25	; 0x03
 adc:	82 83       	std	Z+2, r24	; 0x02
	while(semaphore->TimeOut > 0)
 ade:	18 16       	cp	r1, r24
 ae0:	19 06       	cpc	r1, r25
 ae2:	54 f4       	brge	.+20     	; 0xaf8 <Semaphore_Take+0x24>
	{
		if(semaphore->state == SEMAPHORE_NOT_USED)
 ae4:	81 81       	ldd	r24, Z+1	; 0x01
 ae6:	82 30       	cpi	r24, 0x02	; 2
 ae8:	09 f0       	breq	.+2      	; 0xaec <Semaphore_Take+0x18>
 aea:	ff cf       	rjmp	.-2      	; 0xaea <Semaphore_Take+0x16>
		{
			semaphore->state = SEMAPHORE_USED;
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	81 83       	std	Z+1, r24	; 0x01
			semaphore->TimeOut = 0;
 af0:	13 82       	std	Z+3, r1	; 0x03
 af2:	12 82       	std	Z+2, r1	; 0x02
			return pdTRUE;
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	08 95       	ret
		}
	}
	return pdFALSE;
 af8:	81 e0       	ldi	r24, 0x01	; 1
}
 afa:	08 95       	ret

00000afc <Semaphore_Give>:

/******************************************************************************/

void Semaphore_Give(semaphore_t* semaphore)
{
	semaphore->state = SEMAPHORE_NOT_USED;
 afc:	22 e0       	ldi	r18, 0x02	; 2
 afe:	fc 01       	movw	r30, r24
 b00:	21 83       	std	Z+1, r18	; 0x01
}
 b02:	08 95       	ret

00000b04 <Semaphore_Delete>:

/******************************************************************************/
void Semaphore_Delete(semaphore_t* semaphore)
{
 b04:	fc 01       	movw	r30, r24
	semaphore->create = SEMAPHORE_CREATE_NO;
 b06:	82 e0       	ldi	r24, 0x02	; 2
 b08:	80 83       	st	Z, r24
	semaphore->state = SEMAPHORE_NOT_USED;
 b0a:	81 83       	std	Z+1, r24	; 0x01
	semaphore->TimeOut = 0;
 b0c:	13 82       	std	Z+3, r1	; 0x03
 b0e:	12 82       	std	Z+2, r1	; 0x02
}
 b10:	08 95       	ret

00000b12 <Task3>:
	Semaphore_Give(&sema_task);
}
/****************************************************************************/
void Task3(void)
{
		Dio_FlipChannel(PA_6);
 b12:	86 e0       	ldi	r24, 0x06	; 6
 b14:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Dio_FlipChannel>
}
 b18:	08 95       	ret

00000b1a <Task2>:
}

/****************************************************************************/
void Task2(void)
{	
	Dio_FlipChannel(PA_5);
 b1a:	85 e0       	ldi	r24, 0x05	; 5
 b1c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Dio_FlipChannel>
	LCD_Send_XY(2,1,"Give Semaphore");
 b20:	82 e0       	ldi	r24, 0x02	; 2
 b22:	61 e0       	ldi	r22, 0x01	; 1
 b24:	40 e8       	ldi	r20, 0x80	; 128
 b26:	50 e0       	ldi	r21, 0x00	; 0
 b28:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_Send_XY>
	Semaphore_Give(&sema_task);
 b2c:	8a e8       	ldi	r24, 0x8A	; 138
 b2e:	91 e0       	ldi	r25, 0x01	; 1
 b30:	0e 94 7e 05 	call	0xafc	; 0xafc <Semaphore_Give>
}
 b34:	08 95       	ret

00000b36 <Task1>:

semaphore_t sema_task;

/****************************************************************************/
void Task1(void)
{
 b36:	cf 93       	push	r28
 b38:	df 93       	push	r29
	LCD_SendCMD(CLR_SCREEN);
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_SendCMD>
	LCD_Send_XY(1,1,"Ask For Semaphore");
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	61 e0       	ldi	r22, 0x01	; 1
 b44:	4f e8       	ldi	r20, 0x8F	; 143
 b46:	50 e0       	ldi	r21, 0x00	; 0
 b48:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_Send_XY>
	while(pdFALSE == Semaphore_Take(&sema_task,100));
 b4c:	ca e8       	ldi	r28, 0x8A	; 138
 b4e:	d1 e0       	ldi	r29, 0x01	; 1
 b50:	ce 01       	movw	r24, r28
 b52:	64 e6       	ldi	r22, 0x64	; 100
 b54:	70 e0       	ldi	r23, 0x00	; 0
 b56:	0e 94 6a 05 	call	0xad4	; 0xad4 <Semaphore_Take>
 b5a:	81 30       	cpi	r24, 0x01	; 1
 b5c:	c9 f3       	breq	.-14     	; 0xb50 <Task1+0x1a>
	Dio_FlipChannel(PA_4);
 b5e:	84 e0       	ldi	r24, 0x04	; 4
 b60:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Dio_FlipChannel>

}
 b64:	df 91       	pop	r29
 b66:	cf 91       	pop	r28
 b68:	08 95       	ret

00000b6a <main>:
}

/****************************************************************************/
int main(void)
{
	Port_Init();
 b6a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <Port_Init>
	Dio_WriteChannel(PA_4,1);
 b6e:	84 e0       	ldi	r24, 0x04	; 4
 b70:	61 e0       	ldi	r22, 0x01	; 1
 b72:	0e 94 90 01 	call	0x320	; 0x320 <Dio_WriteChannel>
	LCD_Init();
 b76:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_Init>
	/* Three Tasks with the same priority (1)
	Task1: has periodicity = 2000 tick , First Delay = 0 , asks for semaphore
	Task2: has periodicity = 1000 tick , First Delay = 500 , gives semaphore
	Task3: has periodicity = 100 tick , First Delay = 2000
	*/
	Create_Task(Task1,0,2000,0);
 b7a:	8b e9       	ldi	r24, 0x9B	; 155
 b7c:	95 e0       	ldi	r25, 0x05	; 5
 b7e:	60 e0       	ldi	r22, 0x00	; 0
 b80:	40 ed       	ldi	r20, 0xD0	; 208
 b82:	57 e0       	ldi	r21, 0x07	; 7
 b84:	20 e0       	ldi	r18, 0x00	; 0
 b86:	30 e0       	ldi	r19, 0x00	; 0
 b88:	0e 94 24 04 	call	0x848	; 0x848 <Create_Task>
	Create_Task(Task2,1,1000,500);
 b8c:	8d e8       	ldi	r24, 0x8D	; 141
 b8e:	95 e0       	ldi	r25, 0x05	; 5
 b90:	61 e0       	ldi	r22, 0x01	; 1
 b92:	48 ee       	ldi	r20, 0xE8	; 232
 b94:	53 e0       	ldi	r21, 0x03	; 3
 b96:	24 ef       	ldi	r18, 0xF4	; 244
 b98:	31 e0       	ldi	r19, 0x01	; 1
 b9a:	0e 94 24 04 	call	0x848	; 0x848 <Create_Task>
	Create_Task(Task3,2,100,2000);
 b9e:	89 e8       	ldi	r24, 0x89	; 137
 ba0:	95 e0       	ldi	r25, 0x05	; 5
 ba2:	62 e0       	ldi	r22, 0x02	; 2
 ba4:	44 e6       	ldi	r20, 0x64	; 100
 ba6:	50 e0       	ldi	r21, 0x00	; 0
 ba8:	20 ed       	ldi	r18, 0xD0	; 208
 baa:	37 e0       	ldi	r19, 0x07	; 7
 bac:	0e 94 24 04 	call	0x848	; 0x848 <Create_Task>
	
	Create_SemaphoreBinary(&sema_task);
 bb0:	8a e8       	ldi	r24, 0x8A	; 138
 bb2:	91 e0       	ldi	r25, 0x01	; 1
 bb4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <Create_SemaphoreBinary>

	Start_System();
 bb8:	0e 94 43 05 	call	0xa86	; 0xa86 <Start_System>
 bbc:	ff cf       	rjmp	.-2      	; 0xbbc <main+0x52>

00000bbe <__udivmodhi4>:
 bbe:	aa 1b       	sub	r26, r26
 bc0:	bb 1b       	sub	r27, r27
 bc2:	51 e1       	ldi	r21, 0x11	; 17
 bc4:	07 c0       	rjmp	.+14     	; 0xbd4 <__udivmodhi4_ep>

00000bc6 <__udivmodhi4_loop>:
 bc6:	aa 1f       	adc	r26, r26
 bc8:	bb 1f       	adc	r27, r27
 bca:	a6 17       	cp	r26, r22
 bcc:	b7 07       	cpc	r27, r23
 bce:	10 f0       	brcs	.+4      	; 0xbd4 <__udivmodhi4_ep>
 bd0:	a6 1b       	sub	r26, r22
 bd2:	b7 0b       	sbc	r27, r23

00000bd4 <__udivmodhi4_ep>:
 bd4:	88 1f       	adc	r24, r24
 bd6:	99 1f       	adc	r25, r25
 bd8:	5a 95       	dec	r21
 bda:	a9 f7       	brne	.-22     	; 0xbc6 <__udivmodhi4_loop>
 bdc:	80 95       	com	r24
 bde:	90 95       	com	r25
 be0:	bc 01       	movw	r22, r24
 be2:	cd 01       	movw	r24, r26
 be4:	08 95       	ret

00000be6 <_exit>:
 be6:	f8 94       	cli

00000be8 <__stop_program>:
 be8:	ff cf       	rjmp	.-2      	; 0xbe8 <__stop_program>
